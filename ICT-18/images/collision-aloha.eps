%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 615.000000 190.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.6 (Build 16G1314) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 615 190
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 615 190
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: FiraSans-Book
%!FontType1-1.0: FiraSans-Book 1.0000.4.1060
14 dict begin/FontName /FiraSans-Book def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /C put
dup 34 /o put
dup 35 /l put
dup 36 /i put
dup 37 /s put
dup 38 /n put
dup 39 /space put
dup 40 /t put
dup 41 /e put
dup 42 /r put
dup 43 /v put
dup 44 /a put
dup 45 /two put
dup 46 /T put
dup 47 /m put
dup 48 /A put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -746 1 index div -350 2 index div 1360 3 index div 1093 5 -1 roll div]cvx def
/sfnts [<



B05F2CB20100462B2DB0602CB20101462B2DB0612CB20000422B2DB0622CB20001422B2DB0632CB20100422B2DB0642CB20101422B2DB0652CB03A2B2EB12E01142B2DB0662CB03A2BB03E2B2DB0672CB03A2BB03F2B2DB0682CB00016B03A2BB0402B2DB0692CB03B2B2EB12E01142B2DB06A2CB03B2BB03E2B2DB06B2CB03B2BB03F2B2DB06C2CB03B2BB0402B2DB06D2CB03C2B2EB12E01142B2DB06E2CB03C2BB03E2B2DB06F2CB03C2BB03F2B2DB0702CB03C2BB0402B2DB0712CB03D2B2EB12E01142B2DB0722CB03D2BB03E2B2DB0732CB03D2BB03F2B2DB0742CB03D2BB0402B2DB0752CB3090402034558211B232159422BB00865B003245078B1050115455830592D000004007BFEA2021F041A0003000700250031000D400A2A2610080504020004302B0121112105112111021615140607151406232226353536363534262322070623222635343633121615140623222635343633021FFE5C01A4FE93013769332D320F0A0A0F35261A231D1708050B0D3B220614140F0F14140FFEA2057834FAF00510FDDD4033353A072D0B0D0D0B5403212921240B030D0A1314FEB5140F101515100F14000200080000023302B00007000A002B402809010402014A050104000001040062000202594B030101015A014C0808080A080A11111110060A182B252107231333132327030301A2FEF43658DF6EDE5C4B7070B0B002B0FD50F70171FE8F00000001003AFFF4021902BC001B0031402E02010003100F03030100024A000000035B04010303614B000101025B00020262024C0000001B001A252425050A172B001617072626232206151416333236371706062322262635343636330192532C2F214125596C6C582D42242C20633F5381494B815002BC2023381A1987958F8B1E1C38212B53A07171A15200000001000F000001F602B00007001B4018020100000359000303594B0001015A014C11111110040A182B012311231123352101ECC156C601E70266FD9A02664A0000020030FFF401EA021A001C00250046404316010203150101021E0602050402010005044A030100470001000405010463000202035B000303644B06010505005B00000062004C1D1D1D251D242623232427070A192B241617072626270623222635343633333534262322072736333216151506373523221514163301BE15171428300A346A4D59776D56373A3C52155F535C5A832F4B96312F561F083B05262651574853592A39331D3E245954F445557E7030330000000002003BFFF401E9021A0015001D003340300801010009010201024A0005000001050061000404035B000303644B000101025B00020262024C122525242211060A1A2B00072116163332363717062322263534363633321615273426232206072101E902FEAD064E3F2740232552636C



2AB1000642400C61064D063A052A031D0205082AB1000B42BE160011000C8009000600000500092AB1001042BE00400040004000400040000500092AB1030044B12401885158B0408858B1036444B12601885158BA08800001044088635458B103004459595959400C59084508330725051904050C2AB801FF85B0048DB1020044B1056444000000
00>] def
/CharStrings 20 dict dup begin
/.notdef 0 def
/space 1 def
/A 2 def
/C 3 def
/T 4 def
/a 5 def
/e 6 def
/i 7 def
/dotlessi 8 def
/l 9 def
/m 10 def
/n 11 def
/o 12 def
/r 13 def
/s 14 def
/t 15 def
/v 16 def
/two 17 def
/uni0307 18 def
/uniE003 19 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-746 -350 1360 1093}def
/UniqueID 4302496 def
currentdict currentfile eexec



454EAB6BB028C259B55C7FFEDBA5C97A5B8BB4B2C2457C419D73DDDDD048B87D3C1435C2A68A6721DF119B6ABF54579EE88503A92C3E15EF694681245CDBB44DC916AC816DDF6FC4B0BDC13C14D0E2754413E38E4E722F94BCF858549EC5380588AA0ABC8DC0FD177ED31ED9B80E5E0DE13505D33808BD4199BEF2C654E103FD8F1C138499DBC3799D937D8C44FD8D9AA5D72A01D658BB05E584F5B42FADA2D1250EA394B54246A5DF13DA9D9D733BDE09EE017790C72D9E8FD0CA27342FCC22F439C29B2CCBC68E6F71FBFCD95284C817BCF9969724FC25B54C61B4AA52F567BE534BAD7E49B461A936A032DE1F3A3992CF4C3779D4CB75C1FD28737957CA2396DE542C08CC8CB51999904534480EE9441F878930C63999801DB40D501AF908B7991E1D8256E87C9325B70EE67CE139E912A92F7E39FB6EAC4C7C283761F562EE44AEDC6DC0A1B941CA7A1EF99A03D2C34E8098193BAD8737D4A650CC9EE29EAAD3BA4C17BCC15404014CC92500611B5AC985539FF400E3AA5F1EE1538F226D80407257FBA0A03137CCDE9E295DD6F6FBB807673688F3A4B9B2802834E2C1320F3E0E61F777BF4B3AFE2A8E5352068C2210DAE16839CA57B380B1D79693C5241E456789692B90D1A861A5EC6B1E7CDD59BEE9F85DCCCC33A6C1062F55285AE9212FD5CF61AD4C7E326878E385B166EF0D5DB2486B2993D6BE879DBCA1445B757C4DE0FCE49AA735209AFAE735CFAFD5223D261398DEBC44F02290E4BF229DE1BDBD6765EFC49A9204F49D16372CDE7C51E80AB4DB1082D81EA85DA9B2A07DEA3637787D340BF24F4A525191A77E8DC06DBC19016080ED26934F762B335AB10B4D3FB4779931CD9ECC2065EE55259DAEB7BE2930D466EC99AFF70C8B19340EC91539A1904BE2FEB5C64C334ED84A0B3945CB4E2500066905129115313CDB731A0B98E60680391B3105E5B3CD435A883024DEF27FB54950239E9D9635ED39F49274695777448121638E1B0AC616B73DC134CAD47FD6EA5FDEFCD5A937915799E721E7C0DF1F882BEEA4EC2C63E0549581C8603261AC004B01B54235CC3E7BA25C9DD69B44F5AEEBF3A4DBE7385D9F59B7D8121C2B2F811DDD6DCD43DA32BA99490AB5238B31DE808DBC49565CE8042BEB6CFD54008F1CD589C205B6890613C594E87C47450C56CF767744B23074AA107D5BD21D4654DE8D91B9964123F334AA4A7D1C90B1BCABB0B1FF7F1D721A2ADA007881207CE94A36D0D240EA0999647F080633BA94DCAFC73AAF7AFA767132CAE4C956870B25AED2A30AE1BD111432E185CEF307F10601B029E4E4EACEA9446A7DB16D6F29B0684B73C4CCD21D627D980FA1FA48B5C56373A625DA3C8DF0C069EED1904686FE42F3495EF610F71083001A8AA2190F756F2009880CEEAC2756DA4762800E4609CA0FDED8871B0F37DD4A2E
19985FB610D1655305DC2039986F070DA06CC502A433F8DA8D16829561AC7162616647882B9D420974EB23A3A2C0CDDD4AA795CB6E1B1FDA2767188E01052CA35D680BC22AB9A3F3154212057736E1F35E9B47BBB538A8BDFBE0D8D75767A76EF8504CE2E885347244FEE4C0480690EBB574786E578CAE569D1A16DCA37B2CD8340AD8FCC322A62DB8B475DE0FAE63EF01553008B7ADA63963121463FCF2F4002F463CD26C5E1F48D01421686BC1B4BFA19D8419B74D617F20B2D1BBFDE91C166D32F8380DA11724E276AC87AE3BDF15DA385C4AE2E1BCE83E086B763A8B38E025AED77A146DEEE9AA650EFC18441006EA3641B2D272C5D79DEBEE048C263E90BDADD96193C0FB4E1BC9105E9D0D7CA7BF2E9B36AD994F2867F6034EB57EB7597BCA7B3BF9D3AFF5EF6D9E50345CFC1690948B9170623D4F3119525C79DC149B3EF04DE6F9748EBB6E10A05BDFCD458503561356A86732C75D21C59EFA59D1373121EAFBB1E8CF3DDAFFE8300656E080881C043389D9C2EA6CA474659BE026D28F72C579528D0F177CF2010833E7A770CA74147E814E3C14F8E97158F7AF3AF227907D58A108598F7570EB445F357BCD603E92FE91D9FAD919768C608FBEE25072C9D628455C258139A5D6DCE2E46C0EF51EAFB3A838DE64465B3396870C31F6BD9F009ED5685F1048108FF8517ED8439577944BFBAB77CC2AAA6A7DDFDEE0C3E1B972C7ADF8ED3DA1DA66D01DBDDB4A3593F781D53DC6D2042C359DEA3C5DEF7ED72EC6C9B709E10D0A733F16F2256D1EB3DEC65BB1677E7626A29485945045E54F4DF4A91781AAC4F1AC7A12E746E789EF8C58A43C7D046FF03DADA6C322EDFD702CB103A940D5B1EA7BF9F6375D5F26BFA608C62C1FE0
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/FiraSans-Book cguidfix
/F1.1/FiraSans-Book renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 615 190 rc
-32 490 m
864 490 l
864 -99 l
-32 -99 l
h
-32 490 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -32 490 cm
34 405.75 m
624.09998 405.75 l
S
0 i
CM
600.09998 84.25 m
592.09998 87.25 l
592.09998 81.25 l
h
600.09998 84.25 m
f
0 J
0 j
1 0 0 -1 -32 490 cm
632.09998 405.75 m
624.09998 402.75 l
624.09998 408.75 l
h
632.09998 405.75 m
S
0.145098 0.36470601 0.66666698 sc
CM
181.75 111.25 m
357.25 111.25 l
357.25 84.25 l
181.75 84.25 l
h
181.75 111.25 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -32 490 cm
229.14999 348.75 m
379.35001 348.75 l
S
0 J
0 j
0 i
387.35001 348.75 m
379.35001 348.75 l
379.35001 345.75 m
387.35001 348.75 l
379.35001 351.75 l
S
221.14999 348.75 m
229.14999 348.75 l
229.14999 351.75 m
221.14999 348.75 l
229.14999 345.75 l
S
/Cs2 SC
0 sc
1 0 0 -1 187.25 27.75 cm
/F1.1[ 16 0 0 -16 0 0]sf
-61.112 -7.5 m
(!"##$%$"&'$&\(\)*+,#')[ 8.768000 9.296000 4.656000 4.656000 4.464000 7.456000 4.464000 9.296000 9.360000 4.288000 4.464000 9.360000 5.536000 8.752000 6.288000 7.792000 8.672000 4.656000 0.000000 ] xS
-13.864 11.5 m
(-'.)[ 7.856000 4.288000 0.000000 ] xS
5.1919999 18.5 m
(,)s
1 0 0 -1 272.25 162 cm
-41.271999 -7.5 m
(.$/\)'"&'0$*)[ 8.672000 4.464000 13.696000 8.752000 4.288000 9.296000 9.360000 4.288000 9.136000 4.464000 0.000000 ] xS
-7.7919998 11.5 m
(.)s
-0.88 18.5 m
(,)s
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -32 490 cm
59.150002 429 m
379.35001 429 l
S
0 J
0 j
0 i
387.35001 429 m
379.35001 429 l
379.35001 426 m
387.35001 429 l
379.35001 432 l
S
51.150002 429 m
59.150002 429 l
59.150002 432 m
51.150002 429 l
59.150002 426 l
S
ep
end
%%Trailer
%%EOF
