%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 853.000000 549.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.6 (Build 16G1314) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 853 549
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 853 549
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: FiraSans-Regular
%!FontType1-1.0: FiraSans-Regular 1.0000.4.1060
14 dict begin/FontName /FiraSans-Regular def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /A put
dup 34 /p put
dup 35 /l put
dup 36 /i put
dup 37 /c put
dup 38 /a put
dup 39 /t put
dup 40 /o put
dup 41 /n put
dup 42 /space put
dup 43 /L put
dup 44 /y put
dup 45 /e put
dup 46 /r put
dup 47 /S put
dup 48 /u put
dup 49 /N put
dup 50 /w put
dup 51 /k put
dup 52 /D put
dup 53 /v put
dup 54 /C put
dup 55 /b put
dup 56 /s put
dup 57 /F put
dup 58 /G put
dup 59 /I put
dup 60 /T put
dup 61 /fi put
dup 62 /g put
dup 63 /d put
dup 64 /h put
dup 65 /R put
dup 66 /P put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -748 1 index div -353 2 index div 1360 3 index div 1104 5 -1 roll div]cvx def
/sfnts [<



B05F2CB20100462B2DB0602CB20101462B2DB0612CB20000422B2DB0622CB20001422B2DB0632CB20100422B2DB0642CB20101422B2DB0652CB03A2B2EB12E01142B2DB0662CB03A2BB03E2B2DB0672CB03A2BB03F2B2DB0682CB00016B03A2BB0402B2DB0692CB03B2B2EB12E01142B2DB06A2CB03B2BB03E2B2DB06B2CB03B2BB03F2B2DB06C2CB03B2BB0402B2DB06D2CB03C2B2EB12E01142B2DB06E2CB03C2BB03E2B2DB06F2CB03C2BB03F2B2DB0702CB03C2BB0402B2DB0712CB03D2B2EB12E01142B2DB0722CB03D2BB03E2B2DB0732CB03D2BB03F2B2DB0742CB03D2BB0402B2DB0752CB3090402034558211B232159422BB00865B003245078B1050115455830592D000004007BFEA2021F041A0003000700250031000D400A2A2610080504020004302B0121112105112111021615140607151406232226353536363534262322070623222635343633121615140623222635343633021FFE5C01A4FE93013769332D320F0A0A0F35261A231D1708050B0D3B220614140F0F14140FFEA2057834FAF00510FDDD4033353A072D0B0D0D0B5403212921240B030D0A1314FEB5140F101515100F14000200060000023702B10007000A002B402809010402014A050104000001040062000202594B030101015A014C0808080A080A11111110060A182B2521072313331323270303019FFEFB3460DD78DC644B6B6CADAD02B1FD4FFA0168FE98000000010037FFF4021C02BD001A00344031020100030E030201000F010201034A000000035B04010303614B000101025B00020262024C0000001A0019252424050A172B0016170726232206151416333236371706062322262635343636330193552C343F46566968562C4026301F65415483494C825002BD20243D3384928E871E1C3D212C53A17171A1520000000200640000024D02B100080012002C402905010303015B04010101594B000202005B0000005A004C09090000091209110C0A0008000724060A152B001615140623231133071133323635342626230190BDBD87A590314D60783E604102B191C4BF9D02B14CFDE6769B6D752700000000010064000001D202B100090023402000010002030102610000000459000404594B0003035A034C1111111110050A192B0121153315231123112101C7FEFCE1E15F016E0265EB4BFED102B100010037FFF4023902BD001E0041403E02010005030103000F01010214010401044A0003000201030261000000055B06010505614B000101045B00040462044C0000001E001D2311122525070A192B0016170726262322060615141633323735232733110606232226353436363301A35F2F3825442E3559385F5D4D367A0BE3327145839752884F02BD25273A1E1A397D60918620CF4DFEB31E1FB6AF70A15300010064000000C302B10003






00>] def
/CharStrings 38 dict dup begin
/.notdef 0 def
/space 1 def
/A 2 def
/C 3 def
/D 4 def
/F 5 def
/G 6 def
/I 7 def
/L 8 def
/N 9 def
/P 10 def
/R 11 def
/S 12 def
/T 13 def
/a 14 def
/b 15 def
/c 16 def
/d 17 def
/e 18 def
/g 19 def
/h 20 def
/i 21 def
/dotlessi 22 def
/k 23 def
/l 24 def
/n 25 def
/o 26 def
/p 27 def
/r 28 def
/s 29 def
/t 30 def
/u 31 def
/v 32 def
/w 33 def
/y 34 def
/fi 35 def
/uni0307 36 def
/uniE003 37 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-748 -353 1360 1104}def
/UniqueID 4346234 def
currentdict currentfile eexec


2F6A552BDBA75AB2751DCE24186D1BABF1F35F88D301BA28ACF4F90ABD3245A2F330778E769587CDB0B0FD011B1510739313899DE087F452CF287EEE70CF68B029F53CFBFE696852E075CBEF99A9B2B167464FCCECF63BDA664CF8D40CF3B9B19AD858A2530D5BDD59BF44379CBDC6C375E6537F0645DAD0FA11185CD50F362E88B21667F7FE55069F49042368263CF4A998711BD11E09EDF8783B8C260D06E72037EB1FF21845CE55F9E42EAC546378002FF53EF277B73516D4B49CC55AF67D3A154FD3D348F9E032C6E836966D6A79D35CD7D8597D7BD7857A116EC9E94CC4632B896EAF17D0A83525EDE636C2A09BE3C9918250752314E6BEE7C44821FB067691A070B9E2A54487A822B1DE65C23F2E8326DA25466B85DB965A72DAE152E0C2A595E49E3B14892F31F6C43ABFAEFD990D0404FB42971D6ED201607C5A851A608D12144AA5CCFC96D8F09C178F6DA08B25008817F66700FBB380764441C7B30291AFAE0BDF833341457C7CFA5E0FFCCA88A5CF5D3B157B9FE4968CE283C47BE3DC0F9DC8FEB0537163EF720B346B50298AFE20D5C80C43A77956725A457AE007C2A007C5F4F9C907C77EAE90BF330743F59F74B2E1F11B2219D99A25D97C4EEE7CF0A1D9245C0EFB6CC82F42525F81366ABD028F4CDF60EA0266D9CEAD835131FD30B9AF8D72E2F25A73D3BC8A6899DF0D3D5BBA5360B555EBB39EFB486A5461A249061364B420C25304ACF5760086E25DB26E3ED5BCE590E02AF42B209EA3BAB422A010D40D288F4718B5085815DC073952C34260ADADD023005E9C6C06692004F26E754D9B4714D0E9C9571AB13236BC427801677E003E13F29262B57A78609ABB813E9A66CCF5B90A5F1A39D172CD2D4C600A48C4B8DFB581FF4E316851F69B9076B7DC7737B64BACB005F82990977321C6C641BA01C3D80A5FB9DA7A955CAA7A73A4B353E7FCE573A6FD85060EFD215724FBB886C05E79C40B48222F208AA364A48B6C6AB918DD7D621AD14517068110BF452F302C17F9A18B1F82A50E773B4B0D88E7861B94109C6147FEFF93F3E6D10255E4F9485BB5EC50490E0C628E969F14210CE859EA17EC29EC728477B25466A04DCB30D865FB700665EEFE21C9A6C072131B39464CCFAE4470309B0F35B3679AC616FD2343A322D07B1CACF32B3D3E831BC02103982B2B60B3DE5A6C97003CD8CD27AE99DB305AC0D0C5F26DF9622402B00B59AECADEFCF6B612335E0D15F0DE76B7CD2D92702341423828379211B53FE593BA0BD75C2F3F987CA415BC0EC8A152F4980EA7AEFA59BF35E14AF05D648776F7407292E6DD37B03B78E0C6E98D353DA9517122CFFD4BAC4EEF3DD714766E98E72EFDFC09DE4655C32F7B44C09148AAAF9FD0302B64FD2201AD57ECD5EDD4BFD15E0F1C7E44D7D4F306CE1107F859473791FFDD189E0D57144811
36CC5443102A8A7FC3DB79A8527A0851161121234B4908EBC4D0369FF563B4C469C43C5668C51BD55D9B452639E85869F88456CA3AFA07A3B1668C2320557F59CAA0FF43994F82C8DB8C11D52EDFE23EF7DA915F2034349C3892F9E7E2268F17FE37310A088F072CC31C0846E8E1CBD80AB64BDF22EA6FC6F0CC31EC6CF4DD0C7E39F8B4E28653718AA2FB498882E26B71545F722D6D24D49F4A6CF0950CF6573BBE691371210FE640C6C7992ABD8D9DCCD2E61D2A219180BF029299CEC00FCEBC8352E0D5A1E9A3D3C319A44D1DD1D2D6AAB48D6A4C49F05AB57438FCCD02BB1D8390D6769F8E7F381A3B233DFE741869B9114FF2966546ED395DAC16DE48BC8B7158A00FD343D8CCD326986F8386A61F2D90FB95C5AF7FAC968AA5DE6C00978426AD4C80C3A58FC3BCC0D3D8938AB23B08DC46937BD354BDA160600FCB2B1A72BF7385D541659E50B5576C2E24B1CEDB8AC7B0970A2916F0264C7BCE69E2D3505C31573C3068A852A6BD49C43A93541C4C0DBC5B610869880A038822748222D0B6C58D177D55BC5FE9952A077793A8B04145FF3B42EBEA1BE09EBF88D4812CAD8E37F6022D01B2BD5D2CB39C398F38BBED94C44C11612FF1181A6D1C4759CE3015620BA8B03317B2628F072BA26A348088C6FC6C0658DF350C8A2FC10254FDE62F13E6E5D10F860F513541AED06E0E606ADB0C8DB3627F90CB0751936F0657DCDCAC0C1C48B2C2A9F28A771876752B0C0AB831E470B1B191BBCC70216904189B13EDFF4DCCDA646937CE47D2E91043FA8D3EDDA1DC8FC2A1C94423D8831EED1875A040565C8FE0E68EB0494D07EBB75E664AB8C6741EA670ACB97E92E7A5AB01BCD3F31C7CA688E9A9755E2A82B68D3ACA56F66660061A922C167FD3E3A9D53733EE9131E5B7D331C2C93C87F02BE8BFE310DE7B348778060A40F798A1037A5FA315E71D9A0812A0B5D71F59326D7568256DAE0A629E019BF49BB3E9C8EA93BA9228E0DA93E9489D8DEB25D18A314293E2456EA8999561DC4A7130A94C87BEB1C83D66E652BFB2EC2903FE0ED536B83B8D47616113A4BEFEC38B44970BDF482AC94635C68D0FD354488424C4A95E7E74AEC6FDCFE873584E5F9BF17EC953F68E947B81DADD38AB187F6873781C6E94DA08A373033FAAB107B0EDDF44C83B4386F9E612F2177479F53DA181FDF51C959477BAA17ED9B876055DCA493900B690A639D5A6DA800EBDD017E6F3B404CF17F59AE07222CB0C7BB4320B7B22EA4920DB769A2636E7CA40322CE968508B6AFB505A611BCE67DB0422F0A7306894D75533A4165DC49DE2764E86E0B17BCCB788050E80992176285195BA3228B7794AF7BE8D0683DD096E5EFAD560CD1F15F5BB8CD15EA2BB7A3627ED28A2E90D790AE585C2C60607FBF9848DFF8161A100BDB25ED1B3FF070FA40BB88BCBFC105B1932
086F35E169AB5A2BA99B4DC9704636BBA46CF031B76FD79B84A6B836E3B37075AFFBFE43647166B67582F45126DA67782DDFB51636B3509F822EF7370909BAC7EEE9C6D50B3C573099C173522E2AE400B4985994D232530F808AAA914AFBE6A7AFD164BC2F84E3575BF5EC2B401067FAB4ADE2F47902F5422F594DFCAFA23D932466A12CE733A3468436A367B9D55332A64CCDC9CDCD24E83CB073C2286C6A8848D016C0A18E4183D99908CBC3CB12875F232BFDE94C80289CF368DF0F4A1EDE4FD393D56F886258CB88B1FDE960A6227033376AF3788F5C2FCC74E672519D8D53B2E8739AFF9FB622C9A3DA10FBA8871137E1E3E480B9A5928798B3AF85895BF75D3EA6689B7778B83B10B24C41B2FEA95A6D3EF4CCE942EAD325A3CD63CA81CBAA91B6A5490E5269818250BD9DD8C81BEED3ABE1B740ECF4672712AFD12883736C869C11637A163368F736641115518BC6DBB613D835941C62715670FCC8CDD55BDE4B689DBAFF0552D30FB891091595D05636DFD26CF90BB410DAC59C15DBFBD9F2EC48059BA1AD68C6425B7E33F7D8223AF33473182D042251F11772D04608CE26D2024030795E070BF6F052FE399A26C6F453035749C5290DB8C844A372C742ABB1E0594CEC5C233BC89A274B9D8C22B2BFBA4BEEA3319105FFF766EA1A3793FBC3647B397E3B780BAD77FAB37D4FEC984DECAEE8EB0F5DA812830E72C818AC0327086164A10D54E5BA522AB7A6AEBCAA035BD56934CC91CC5797687C1E79080375A13A127E2221BA8C2B7825BFD0B42575712713702B860174322C1F4D8076F1B435C387F8F7247550CCE9268BE8ED6B557E53D6030AE2DCC029639BCF6A2C7E52110CE6DBA1187DCC098AAAB56E9BEBE01715EF41354EFF89DC026D624111F1C2B2CB0F64CC77DCE7A60F2C85B19E966F94D9636410A2D5C7BB57324C90BD71941B7980ECD0823AEF0EF4748C0A2311532A7E3FCCBDA17432EB365C53D1BEC1761BB614362B2193DF82E2F6E6CE691EA2A2967D3304532EE72D149BF50573E6743DF1C1E14BB36268097B3D0E0069C3AEBE63E50430F7B803C22A431FD37554207FA2B634B6B17C1F1159C228B2BA32C250414815DB3AAC555C185A6508632FBC57F632CF98BB4BEDF0E5F37C9B548A54C3D7116342E96E8EAEC2160769FEC907FF0665BA5612A6DB6CE69D799F70C66EDC181B85E12C1E118F135BCBFA945367C301A97657ECD4B0266EEB6FF713214159D72CF25F1E2CAED0E15D5F91B3202635123BBE09E6C23F29FCF4D8FC9B3531F46ECA20CDD558EB996120342883934553812EFEE3D892EFC250481BA284840188747132DE00A9A803C98B83534000C6C641483A53BCC475D30D404EFA887F90B2CEC038445F7F987365A18954913ED9AA21A8BF8771016B7632DC14E59BAABC656EE66967AA9A575810A397
0EEB474FE13241B54A9BE8A0C6F77A007E5D684ED5129512523226263094ADA3FD5C42D329C08938C6FB8247E4B5DF8749F47C7A5D85CA8E69F9621A3FC816C87D02F7EF98710CF1E8C506792D80F5770395F3A99EACB4593F9C29FBEC6898F46E2B36DC05A65490FD08B033CB5F81EC5683AFA4D909F003FF92A01AEE0D7FAA9D74028EB1F7B5499DA814B0B56A6E9B907E088D6AF9381843725E816D75B78FA833643592D70584FAF6A13CF3A14084FDED8BC5272E09B0CAF08CEBAC147879554CD898E187C869B533F954F27B3AD8F2FAE644E0F669256F93B33C7FD94863614D7E0C76871AEC6D35AF9B1FCDB9C2083F9D4E9252CB090D11B034C47188EA5395DE76F6A3277A1D49DF72F809693E3CE6E6FDD94B401B8B1EBD6E2BF41326B59A881BFCB76B8737A0656AD890E534DB02B7A1F167F0300E0F11093318BE5B014154BCE6C0A9A0EA2A09D58D8DBB00687809B5EA1ED79B4DD08095A46AC1624347376E746314B0D977934D765D959CE07506823F2F71CC13EDAEE9C10458C29A58A903734DBAD490EAD3E23644B9875A3A71A7CAD65B391AC5F73674ADA01791989BFDADD06D47516279777E638369FF67917FCE54E39EE32C487C8FC79067974CD48D6B3E18690E0B3AC39A00EAFEFB1F56F4290366D1B78D0EA78EF3BA25B64C7D5DFAF81AA04C76BCF399D093CD3B57009F6CCD5AFF4F907D4B9DA2DF1C2E0B1E85DD1E510D6687375C7EC2E482DCDE4D452954A5E7C9487B52145A8E8ED4EC18C2472E2C4F7D61E5AB9042F1C677D5C6C913C57700EC859B5F32185A3C6A4B07CD3999E3B8A23EF83D94B3284D89CBF31567C449DF1B502545FB19339597623E4EA86BA45249E316C7441732FD991A3B31C40F5C0722434D3F6D71701457D6B3EF70B406A3B4866C5DAD9B0CA1F1EED0D31A2840C798631A4B6DCD52E23C0A61FF684053D95450695CE89D948EDE661940BADCC53F2BAEDDCFB5FBA2D3FE4C587DA894D8FA5B9F89D4242C47D1FC8674109DFEB8C596003B2F3DA4545DAC1BBB8B3CA7CC6E621B5D8C2CB97748C90FA530F4EE4C3A801838F295D3E296D22092C8DB580918C57FA552F9E614BCCA1B31D925372418809B4C1195C246645699DF89906AD3D8CAE60C6F84BD28BC9741368FCE7399EBE85E729B3B7A4AB6DF81DCFA16BDE88EBC3F4B70B75238EEC6F4BA7972845515F6908F0C76BCDE3734E7599DECDA3668236155143CABBEA3A2F9FCF3A2B598FCB8D42CAA3BB8C03361F277F6CFF4FAFCE4C26D357A6428BC1EB2D497A3021BA616038088AEE58CB43E872DC3BD0586AA7411CB09BCE7384039B986D3B913BDDF4E50DE6DB089E060F4377FB193D9223803499EE8ED3D37756F7FD71090E73FD55BD48E717127E8876FBC32222FE1AA846C8D0E006162572D28AF3966063953242DC1C961BF455995
6F0A9DB99DD6E6472729EDB0FD0215CC4BDFF8909B7F7BA96E9DD0D3695EFF972AB7CBDA298E96855ABCA0E33C8CEB8CBD7AF4927CFC4B2EBE47C164037D1107E61938E0AED57E29FF2A4FBA90CBE2825306E29D6C00E0B784C7CA30B2F859812568D01D413CF4B2F24970909CFBCF84008FF1DC4EDE834C3A0D3E915E21517540A7BF4791D24C132EED88E72170D671BE3BCCB0B818097BA66C5420EE600CEBF085CEADBFF4E92CD64B94AC442789AEA8535A4CEBC8347601B0B97485281960143199F60F18423271672560A0C6085BC917D3E33D5F205FB279A3275DEEF79F72F91CE8FCAE0312635ABF5C3863D6852085E8E1956D565010CC8341C598981E3B1E2C84C65E29D1429244678155AE3C11CF1987B80AA189869EE22A0AFF9E2397E37990B1FCD8EB9926B545C2A2A5ACBBA532808AC06D50C20DFAFE2CCCF86D11BFA07541F9749307C7B6A0160EA1FDE53C2ABC59A328C8F3DF59514A57B4939AFA373E242112C2D4D4863971B280D528CC32FBB4A4BFAB01390B2EE70BFBD8B3AE190B51D1165822CBF0D73F47576A7F01FEF811E8D06071D9F8A9DB1FF73C9484CC29DBAAEE55BDF10C7B07B1E2506CDA1EA10CBC83D7601765EEBB5471C4A62C7B1292737A0B44FB2DFF4DFB2E1D1A3ABF285CADD0B4ADCF52457A45001D93ED3D429ED3ABD32469AB91C08301C83E4FCD9D4C2DD03677A6C12795F445C340E4F8BA0E236A9F3C16A9F719525E384AC224E7E2AC45A157FB6BBC06674E71A235414EB1C5F577271099F4C538AC9BBC46A9DA50948B255B535F21E8360E31CF62301EC4AD00D9ACBFE0FE94F007549B31FB425EB86D1B982F262BA021A745A1AEA3893E68270933490B64A11FDD3DFD6C688C720E17ABD12720B61EFCA86A9A655CC70A98F5ED2EC604FD2461E77A82434548C0C5254D33
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/FiraSans-Regular cguidfix
/F1.1/FiraSans-Regular renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 853 549 rc
-163 2353 m
1030 2353 l
1030 -580 l
-163 -580 l
h
-163 2353 m
f
10 167.5 m
843 167.5 l
847.41827 167.5 851 163.91827 851 159.5 c
851 67 l
851 62.581722 847.41827 59 843 59 c
10 59 l
5.5817218 59 2 62.581722 2 67 c
2 159.5 l
2 163.91827 5.5817218 167.5 10 167.5 c
h
10 167.5 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -163 2353 cm
173 2185.5 m
1006 2185.5 l
1010.4183 2185.5 1014 2189.0818 1014 2193.5 c
1014 2286 l
1014 2290.4182 1010.4183 2294 1006 2294 c
173 2294 l
168.58173 2294 165 2290.4182 165 2286 c
165 2193.5 l
165 2189.0818 168.58173 2185.5 173 2185.5 c
h
173 2185.5 m
S
0 i
1 1 1 sc
CM
10 276 m
843 276 l
847.41827 276 851 272.41827 851 268 c
851 175.5 l
851 171.08173 847.41827 167.5 843 167.5 c
10 167.5 l
5.5817218 167.5 2 171.08173 2 175.5 c
2 268 l
2 272.41827 5.5817218 276 10 276 c
h
10 276 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -163 2353 cm
173 2077 m
1006 2077 l
1010.4183 2077 1014 2080.5818 1014 2085 c
1014 2177.5 l
1014 2181.9182 1010.4183 2185.5 1006 2185.5 c
173 2185.5 l
168.58173 2185.5 165 2181.9182 165 2177.5 c
165 2085 l
165 2080.5818 168.58173 2077 173 2077 c
h
173 2077 m
S
0 i
1 1 1 sc
CM
10 384.5 m
843 384.5 l
847.41827 384.5 851 380.91827 851 376.5 c
851 284 l
851 279.58173 847.41827 276 843 276 c
10 276 l
5.5817218 276 2 279.58173 2 284 c
2 376.5 l
2 380.91827 5.5817218 384.5 10 384.5 c
h
10 384.5 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -163 2353 cm
173 1968.5 m
1006 1968.5 l
1010.4183 1968.5 1014 1972.0817 1014 1976.5 c
1014 2069 l
1014 2073.4182 1010.4183 2077 1006 2077 c
173 2077 l
168.58173 2077 165 2073.4182 165 2069 c
165 1976.5 l
165 1972.0817 168.58173 1968.5 173 1968.5 c
h
173 1968.5 m
S
0 i
1 1 1 sc
CM
10 493 m
843 493 l
847.41827 493 851 489.41827 851 485 c
851 392.5 l
851 388.08173 847.41827 384.5 843 384.5 c
10 384.5 l
5.5817218 384.5 2 388.08173 2 392.5 c
2 485 l
2 489.41827 5.5817218 493 10 493 c
h
10 493 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -163 2353 cm
173 1860 m
1006 1860 l
1010.4183 1860 1014 1863.5817 1014 1868 c
1014 1960.5 l
1014 1964.9183 1010.4183 1968.5 1006 1968.5 c
173 1968.5 l
168.58173 1968.5 165 1964.9183 165 1960.5 c
165 1868 l
165 1863.5817 168.58173 1860 173 1860 c
h
173 1860 m
S
0 i
1 0 0 -1 58.5 439 cm
/F1.1[ 16 0 0 -16 0 0]sf
-41.368 -4 m
(!""#$%&'$\(\)*)[ 9.168000 9.504000 9.504000 4.688000 4.512000 7.648000 8.704000 5.776000 4.512000 9.344000 9.376000 0.000000 ] xS
-19.559999 15 m
(+&,-.)[ 7.968000 8.544000 7.632000 8.800000 0.000000 ] xS
/Cs2 SC
0 sc
1 0 0 -1 58.5 330 cm
-29.247999 -4 m
(/0""\(.'*)[ 8.720000 9.312000 9.504000 9.504000 9.344000 6.336000 5.776000 0.000000 ] xS
-19.559999 15 m
(+&,-.)[ 7.968000 8.544000 7.632000 8.800000 0.000000 ] xS
1 0 0 -1 58.5 221.5 cm
-30.264 -4 m
(1-'2\(.3*)[ 10.928000 8.800000 5.776000 11.312000 9.344000 6.176000 8.192000 0.000000 ] xS
-19.559999 15 m
(+&,-.)[ 7.968000 8.544000 7.632000 8.800000 0.000000 ] xS
1 0 0 -1 58.5 114.5 cm
-23.808001 -4 m
(4-5$%-*)[ 10.304000 8.640000 7.872000 4.512000 7.488000 8.800000 0.000000 ] xS
-19.559999 15 m
(+&,-.)[ 7.968000 8.544000 7.632000 8.800000 0.000000 ] xS
/Cs1 SC
0 0 0 sc
1 0 0 -1 282 531 cm
-42.824001 5.5 m
(6&"&7$#$'$-8)[ 8.960000 8.704000 9.504000 8.704000 9.504000 4.512000 4.688000 4.512000 5.776000 4.512000 8.800000 0.000000 ] xS
/Cs2 SC
0 sc
1 0 0 -1 639 531 cm
-35.335999 5.5 m
(90\)%'$\(\)8)[ 7.856000 9.312000 9.376000 7.648000 5.776000 4.512000 9.344000 9.376000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
129 547 m
434 547 l
438.41827 547 442 543.41827 442 539 c
442 10 l
442 5.5817218 438.41827 2 434 2 c
129 2 l
124.58172 2 121 5.5817218 121 10 c
121 539 l
121 543.41827 124.58172 547 129 547 c
h
129 547 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -163 2353 cm
292 1806 m
597 1806 l
601.41827 1806 605 1809.5817 605 1814 c
605 2343 l
605 2347.4182 601.41827 2351 597 2351 c
292 2351 l
287.58173 2351 284 2347.4182 284 2343 c
284 1814 l
284 1809.5817 287.58173 1806 292 1806 c
h
292 1806 m
S
0 i
1 1 1 sc
CM
481 547 m
786 547 l
790.41827 547 794 543.41827 794 539 c
794 10 l
794 5.5817218 790.41827 2 786 2 c
481 2 l
476.58173 2 473 5.5817218 473 10 c
473 539 l
473 543.41827 476.58173 547 481 547 c
h
481 547 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -163 2353 cm
644 1806 m
949 1806 l
953.41827 1806 957 1809.5817 957 1814 c
957 2343 l
957 2347.4182 953.41827 2351 949 2351 c
644 2351 l
639.58173 2351 636 2347.4182 636 2343 c
636 1814 l
636 1809.5817 639.58173 1806 644 1806 c
h
644 1806 m
S
284 1969 m
444 1969 l
444 2077 l
284 2077 l
h
284 1969 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 201 330 cm
-59.071999 -4 m
(:-\)-.$%*/0""\(.'*)[ 10.096000 8.800000 9.376000 8.800000 6.176000 4.512000 7.648000 4.240000 8.720000 9.312000 9.504000 9.504000 9.344000 6.336000 5.776000 0.000000 ] xS
-42.824001 15 m
(6&"&7$#$'$-8)[ 8.960000 8.704000 9.504000 8.704000 9.504000 4.512000 4.688000 4.512000 5.776000 4.512000 8.800000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -163 2353 cm
444 1969 m
605 1969 l
605 2076.5 l
444 2076.5 l
h
444 1969 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 361.5 330.25 cm
-72.671997 -4 m
(;\(<*/"-%$=%*/0""\(.'*)[ 4.720000 9.344000 8.272000 4.240000 8.720000 9.504000 8.800000 7.648000 4.512000 9.200000 7.648000 4.240000 8.720000 9.312000 9.504000 9.504000 9.344000 6.336000 5.776000 0.000000 ] xS
-42.824001 15 m
(6&"&7$#$'$-8)[ 8.960000 8.704000 9.504000 8.704000 9.504000 4.512000 4.688000 4.512000 5.776000 4.512000 8.800000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -163 2353 cm
284 2129 m
605 2129 l
605 2186 l
284 2186 l
h
284 2129 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 281.5 195.5 cm
-79.624001 5.5 m
(<.&\)8"\(.'*6&"&7$#$'$-8)[ 6.992000 5.856000 8.704000 9.376000 7.472000 9.504000 9.344000 6.336000 5.776000 4.240000 8.960000 8.704000 9.504000 8.704000 9.504000 4.512000 4.688000 4.512000 5.776000 4.512000 8.800000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -163 2353 cm
284 2076.5 m
605 2076.5 l
605 2129 l
284 2129 l
h
284 2076.5 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 281.5 250.25 cm
-86.311996 5.5 m
(1-'2\(.3$\)>*6&"&7$#$'$-8)[ 10.928000 8.800000 5.776000 11.312000 9.344000 6.176000 8.192000 4.512000 9.376000 8.320000 4.240000 8.960000 8.704000 9.504000 8.704000 9.504000 4.512000 4.688000 4.512000 5.776000 4.512000 8.800000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -163 2353 cm
284 2238 m
605 2238 l
605 2295 l
284 2295 l
h
284 2238 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 281.5 86.5 cm
-68.751999 5.5 m
(4-5$%-*6&"&7$#$'$-8)[ 10.304000 8.640000 7.872000 4.512000 7.488000 8.800000 4.240000 8.960000 8.704000 9.504000 8.704000 9.504000 4.512000 4.688000 4.512000 5.776000 4.512000 8.800000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -163 2353 cm
445 2186 m
605 2186 l
605 2238 l
445 2238 l
h
445 2186 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 362 141 cm
-30.552 -4 m
(:&'-2&,*)[ 10.096000 8.704000 5.616000 8.800000 11.472000 8.544000 7.872000 0.000000 ] xS
-42.824001 15 m
(6&"&7$#$'$-8)[ 8.960000 8.704000 9.504000 8.704000 9.504000 4.512000 4.688000 4.512000 5.776000 4.512000 8.800000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -163 2353 cm
636 2186 m
957 2186 l
957 2295 l
636 2295 l
h
636 2186 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 633.5 112.5 cm
-81.919998 5.5 m
(/-\)8$\)>*&\)?*:&'@-.$\)>)[ 8.720000 8.800000 9.376000 7.472000 4.512000 9.376000 8.320000 4.240000 8.704000 9.376000 9.568000 4.240000 10.096000 8.704000 5.776000 9.376000 8.800000 6.176000 4.512000 9.376000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -163 2353 cm
636 2077 m
957 2077 l
957 2186 l
636 2186 l
h
636 2077 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 633.5 221.5 cm
-28.08 5.5 m
(A\(0'$\)>)[ 9.520000 9.344000 9.312000 5.776000 4.512000 9.376000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -163 2353 cm
636 1968 m
957 1968 l
957 2077 l
636 2077 l
h
636 1968 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 633.5 330.5 cm
-83.143997 5.5 m
(B.\(%-88$\)>*&\)?*/'\(.$\)>)[ 9.296000 6.016000 9.344000 7.488000 8.800000 7.472000 7.472000 4.512000 9.376000 8.320000 4.240000 8.704000 9.376000 9.568000 4.240000 8.720000 5.616000 9.344000 6.176000 4.512000 9.376000 0.000000 ] xS
1 0 0 -1 282 526 cm
-42.824001 5.5 m
(6&"&7$#$'$-8)[ 8.960000 8.704000 9.504000 8.704000 9.504000 4.512000 4.688000 4.512000 5.776000 4.512000 8.800000 0.000000 ] xS
1 0 0 -1 633.5 526 cm
-35.335999 5.5 m
(90\)%'$\(\)8)[ 7.856000 9.312000 9.376000 7.648000 5.776000 4.512000 9.344000 9.376000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
