%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 853.000000 549.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.6 (Build 16G1314) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 853 549
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 853 549
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: FiraSans-Regular
%!FontType1-1.0: FiraSans-Regular 1.0000.4.1060
14 dict begin/FontName /FiraSans-Regular def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /A put
dup 34 /p put
dup 35 /l put
dup 36 /i put
dup 37 /c put
dup 38 /a put
dup 39 /t put
dup 40 /o put
dup 41 /n put
dup 42 /space put
dup 43 /L put
dup 44 /y put
dup 45 /e put
dup 46 /r put
dup 47 /S put
dup 48 /u put
dup 49 /N put
dup 50 /w put
dup 51 /k put
dup 52 /D put
dup 53 /v put
dup 54 /C put
dup 55 /b put
dup 56 /s put
dup 57 /F put
dup 58 /T put
dup 59 /g put
dup 60 /G put
dup 61 /d put
dup 62 /h put
dup 63 /R put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -748 1 index div -353 2 index div 1360 3 index div 1104 5 -1 roll div]cvx def
/sfnts [<









000700020024003400770000009A0B9700040001004BB800C85258B101018E59B001B9080008006370B1000642B664503C2A0005002AB1000642400C5708430831072305170405082AB1000642400C61064D063A052A031D0205082AB1000B42BE160011000C8009000600000500092AB1001042BE00400040004000400040000500092AB1030044B12401885158B0408858B1036444B12601885158BA08800001044088635458B103004459595959400C59084508330725051904050C2AB801FF85B0048DB1020044B1056444000000
00>] def
/CharStrings 35 dict dup begin
/.notdef 0 def
/space 1 def
/A 2 def
/C 3 def
/D 4 def
/F 5 def
/G 6 def
/L 7 def
/N 8 def
/R 9 def
/S 10 def
/T 11 def
/a 12 def
/b 13 def
/c 14 def
/d 15 def
/e 16 def
/g 17 def
/h 18 def
/i 19 def
/dotlessi 20 def
/k 21 def
/l 22 def
/n 23 def
/o 24 def
/p 25 def
/r 26 def
/s 27 def
/t 28 def
/u 29 def
/v 30 def
/w 31 def
/y 32 def
/uni0307 33 def
/uniE003 34 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-748 -353 1360 1104}def
/UniqueID 4346234 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C55AC8266BDD340E521355EEF85826934CAE169B3813170EF211585A84BA2E1018753AC3D46AF5B7E6972E6CE9D784AF774D03E666C4D6E151C49B4681AA1928D810D912B01331A14D9D2378EB85DDF7134BDC053104FF791442F9940D76A7519C0CB01B65A0B8E55F92D5E9035861817FC4462B7808D0A5DC5F975CFB5F7E051950C9CC4F8BBD223230B1121670A6C9F598F7E00EC07A1061355631277C097ED675F2773084D33D074F6A0C998DDF0A9E03D6E60A21107F05F524CCF8F226165310DCA2949D77C6F2FDE3143D59AE885E44C05464B0DFF511DCDE73E69616AF3821A443902C699F05EF6F6A4CE780B25D8AD5AD7836D95CA43A78A0AC5192A4B42FA8FC0494BFD6DA7BF7E88C76F74965E95033870FADECBC03DB44B21594A50F89C3168BD0CBD451ADD939D33248A17E00FB07475F274DD2D84FB2EA910B9DF50BD5160DBEDB53DE4D620BAF17C99A0CC187E1FB0A91A88335D4E8D49DE606DF0D2A58D05048ED7FB244382657E4018EDE0BFC82FF887A1FC9593C4022740273345C32DEF468B4A278A27E3226BBA173AF2FCC788F9760CC67A5FF9385ACB6198404E4B287AF4B64034368334F569B52FB4558290C8D84D1E4B137907080FFE810983D62084E337A00D3E2030ECD336F45A5463F8ABE6316322A5347EA19C4FB94548EEA51AF39FCE95101489829FEC76DB3A3C259CF321AF1F9DCE187C0F3BDBF9D2F47933511C382B2A2D8386D6D8402B9457C846F7367EB771E745FC62FA43C68FC7F248A845EA89EE74FB200D5E2E81806D3D8808203F0FBC278F10AB91A720429




69A2304DB3B0061291F65244376770E19BD0231C74470057513519828961FEFC58433EB489F34B01AB243D9DB63D36584A2C4B892CC416D5E793DE1B286640770BAC580427B8D81F019FCEB9C9F7AECF2F36E4669979499BCA8DC019D6C85B43506A5145EF4E35A573FAE4D630DD62FBD72D48E96C881612EF5504C1671BEC32F17CB711A7E93F81F4D003070B7056E56C930B2A5860A7D3BD07496CDAD9A96A26078489FD1962922654C631BE05DC81927EE716C5EE285D233CFFC762217AAAA8FF53D8819A9461B28BC0C1E22C478FDAB69713C75BD6056B692BD957481C6A34FBE472FA379511DBD6EBA8ACF80A54701F31E8E3512EF2ED391926BFEDA366C220086D0BF5E9F4E3791A04859CAC8BDB22D3015A9416295FE267B261FAA09FDF12422507476E8C40C83BC641993011FED123E57C344704CB8E9B89AAB764D554D3F26E699EF3CFB2648D27BB71423522B9DF1B61664E058450BE5C3706F8B4B4F365503A86F0149E13F0220C0C3DA4FCFC839C926056ABB59B75D6685B16EF43D9255729654C16761AAFB83BEED1686807CBD66B333009F37D49D0EAC50A3DFACED4EF7D4EA20FA56AA7F3C184DD8C9ABAA76A83070AC1658C2D253EEF9BFC98F4935E6BE75D663B38BD79B925040FCD9FF07EC5707CEDD3C146E114C39134E47D2A709487BDC897FD740C788172EFB2AC9A769EAE6368750226DCEF9F7E440D54A2B8FD1684589E2A98CE247A14555A1FF7CCD1F2EAD25A07D5D3C0BF864DDF28115B1D1076DE696126AD26E1AA80CA396A12EE7CC560560DCEC13C47063B4E5DB1597959683EEE56444E08A99B2C1A6AFB98E066014E0EBEEFB210F2D68712A767FE9C6AF2E9C126B3DCF0917A9B5CF8E89A912C32EBD4561588D0405F0D83D81ECD2E0F49A8C892E6082E9E4FF9FA0A44CD676F3821802AF6F3A1AA88CAF1592F5AAAF648D9B9C87AD52BACD1B4953DE4AE98A50B3A558B40DF24C086C6655EABA07E77A3C87E2D0233E789304A63049DCCAF1F29F3A651584DB3C92FCAC0FAC680BB403278770B0565BAEF46C69BA9F06979A80B6F3E33EE5CDBB2BB475D7E548C751F63B701DEEDAAE20245961708CF6AF638AEB56BAA9B56DA1E9D599CA771F1B50C107379B454A933D36E4A71EE7039152FA87CE0178CDF80D83FFC110CFAAE4B893625A9E419466E58CD1D1A64E0FABB2A6ABA2D527294DFA54E5987D37F4DFFB12464F15DD0A5D1009CAB18585ECCDA3CC7C2E46C0C3AEAEE4874371A17BC4A211E9F3DD3CBDA5BC2A3F6447F9D0927F9120986051A9F64A5CD643DE1A800E8BCA9335082E313541FA81B7897C839C746C3A36D9499731B93FB9B03507E10BDB72FB39E5687CAD1733A809DC2A297D500FB8C5E66D9127FDD7477DC753D436EB17C4D61E1D50F95658E7C18C4CAA802531727EDC76A2347A00F20
9474F39E568C87907949AEDC4EBD72AC2C844B489297A93A75A983BAC11560B8AE404414937E387E6860C4ABE966FD527E3D27A6804BD2BB39AC23A3F7F31A96B2297B4D2949B32797CE446E9228D8C9DC0D7858F878987E7319E4C339E3D5A815FADAB17EA05EEDDE0DF13BBB45EB1E3662C53D8F0CB47AA7B181B7FD15BE3ADAFC06FE8B5E2A308653FDF2A722E7AE4D768F9A719C425D4539CBF5DF6F2749B6D296AA30FFAC41E54BC4306711AA65FB186AD7B985445F930883C7C061335B03E09436972228082D6E3A8381ABC3947534842624FA6B6C01CEEA612B595726C329996B16232312D13F732C59411D0973E329E3F0F30BC06BA01B64352F84CC40446E455F8711CCA21AB2420F87C16CB1809418ADA5DA76C6961C1232D5B67E03D4315E85A1BF1BD8FA308EB81E5A998BAE6AF4084CD075BBB933D54D80C5D606867E5EB3E2DEB84A6E42F9FA366AE6D6E096D801190B376781001B944609926894A9EF14808513FC658529AC4C8D67F495A428A8BF727BC38EBB055FB9E6501275C5F2794D9CB3E083A1943B7E6491452015CEB7E458DC21
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/FiraSans-Regular cguidfix
/F1.1/FiraSans-Regular renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 853 549 rc
-163 1750 m
1030 1750 l
1030 -1183 l
-163 -1183 l
h
-163 1750 m
f
10 167.5 m
843 167.5 l
847.41827 167.5 851 163.91827 851 159.5 c
851 67 l
851 62.581722 847.41827 59 843 59 c
10 59 l
5.5817218 59 2 62.581722 2 67 c
2 159.5 l
2 163.91827 5.5817218 167.5 10 167.5 c
h
10 167.5 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -163 1750 cm
173 1582.5 m
1006 1582.5 l
1010.4183 1582.5 1014 1586.0817 1014 1590.5 c
1014 1683 l
1014 1687.4183 1010.4183 1691 1006 1691 c
173 1691 l
168.58173 1691 165 1687.4183 165 1683 c
165 1590.5 l
165 1586.0817 168.58173 1582.5 173 1582.5 c
h
173 1582.5 m
S
0 i
1 1 1 sc
CM
10 276 m
843 276 l
847.41827 276 851 272.41827 851 268 c
851 175.5 l
851 171.08173 847.41827 167.5 843 167.5 c
10 167.5 l
5.5817218 167.5 2 171.08173 2 175.5 c
2 268 l
2 272.41827 5.5817218 276 10 276 c
h
10 276 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -163 1750 cm
173 1474 m
1006 1474 l
1010.4183 1474 1014 1477.5817 1014 1482 c
1014 1574.5 l
1014 1578.9183 1010.4183 1582.5 1006 1582.5 c
173 1582.5 l
168.58173 1582.5 165 1578.9183 165 1574.5 c
165 1482 l
165 1477.5817 168.58173 1474 173 1474 c
h
173 1474 m
S
0 i
1 1 1 sc
CM
10 384.5 m
843 384.5 l
847.41827 384.5 851 380.91827 851 376.5 c
851 284 l
851 279.58173 847.41827 276 843 276 c
10 276 l
5.5817218 276 2 279.58173 2 284 c
2 376.5 l
2 380.91827 5.5817218 384.5 10 384.5 c
h
10 384.5 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -163 1750 cm
173 1365.5 m
1006 1365.5 l
1010.4183 1365.5 1014 1369.0817 1014 1373.5 c
1014 1466 l
1014 1470.4183 1010.4183 1474 1006 1474 c
173 1474 l
168.58173 1474 165 1470.4183 165 1466 c
165 1373.5 l
165 1369.0817 168.58173 1365.5 173 1365.5 c
h
173 1365.5 m
S
0 i
1 1 1 sc
CM
10 493 m
843 493 l
847.41827 493 851 489.41827 851 485 c
851 392.5 l
851 388.08173 847.41827 384.5 843 384.5 c
10 384.5 l
5.5817218 384.5 2 388.08173 2 392.5 c
2 485 l
2 489.41827 5.5817218 493 10 493 c
h
10 493 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -163 1750 cm
173 1257 m
1006 1257 l
1010.4183 1257 1014 1260.5817 1014 1265 c
1014 1357.5 l
1014 1361.9183 1010.4183 1365.5 1006 1365.5 c
173 1365.5 l
168.58173 1365.5 165 1361.9183 165 1357.5 c
165 1265 l
165 1260.5817 168.58173 1257 173 1257 c
h
173 1257 m
S
0 i
1 0 0 -1 58.5 439 cm
/F1.1[ 16 0 0 -16 0 0]sf
-41.368 -4 m
(!""#$%&'$\(\)*)[ 9.168000 9.504000 9.504000 4.688000 4.512000 7.648000 8.704000 5.776000 4.512000 9.344000 9.376000 0.000000 ] xS
-19.559999 15 m
(+&,-.)[ 7.968000 8.544000 7.632000 8.800000 0.000000 ] xS
/Cs2 SC
0 sc
1 0 0 -1 58.5 330 cm
-29.247999 -4 m
(/0""\(.'*)[ 8.720000 9.312000 9.504000 9.504000 9.344000 6.336000 5.776000 0.000000 ] xS
-19.559999 15 m
(+&,-.)[ 7.968000 8.544000 7.632000 8.800000 0.000000 ] xS
1 0 0 -1 58.5 221.5 cm
-30.264 -4 m
(1-'2\(.3*)[ 10.928000 8.800000 5.776000 11.312000 9.344000 6.176000 8.192000 0.000000 ] xS
-19.559999 15 m
(+&,-.)[ 7.968000 8.544000 7.632000 8.800000 0.000000 ] xS
1 0 0 -1 58.5 114.5 cm
-23.808001 -4 m
(4-5$%-*)[ 10.304000 8.640000 7.872000 4.512000 7.488000 8.800000 0.000000 ] xS
-19.559999 15 m
(+&,-.)[ 7.968000 8.544000 7.632000 8.800000 0.000000 ] xS
/Cs1 SC
0 0 0 sc
1 0 0 -1 282 531 cm
-42.824001 5.5 m
(6&"&7$#$'$-8)[ 8.960000 8.704000 9.504000 8.704000 9.504000 4.512000 4.688000 4.512000 5.776000 4.512000 8.800000 0.000000 ] xS
/Cs2 SC
0 sc
1 0 0 -1 639 531 cm
-35.335999 5.5 m
(90\)%'$\(\)8)[ 7.856000 9.312000 9.376000 7.648000 5.776000 4.512000 9.344000 9.376000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
129 547 m
434 547 l
438.41827 547 442 543.41827 442 539 c
442 10 l
442 5.5817218 438.41827 2 434 2 c
129 2 l
124.58172 2 121 5.5817218 121 10 c
121 539 l
121 543.41827 124.58172 547 129 547 c
h
129 547 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -163 1750 cm
292 1203 m
597 1203 l
601.41827 1203 605 1206.5817 605 1211 c
605 1740 l
605 1744.4183 601.41827 1748 597 1748 c
292 1748 l
287.58173 1748 284 1744.4183 284 1740 c
284 1211 l
284 1206.5817 287.58173 1203 292 1203 c
h
292 1203 m
S
0 i
1 1 1 sc
CM
481 547 m
786 547 l
790.41827 547 794 543.41827 794 539 c
794 10 l
794 5.5817218 790.41827 2 786 2 c
481 2 l
476.58173 2 473 5.5817218 473 10 c
473 539 l
473 543.41827 476.58173 547 481 547 c
h
481 547 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -163 1750 cm
644 1203 m
949 1203 l
953.41827 1203 957 1206.5817 957 1211 c
957 1740 l
957 1744.4183 953.41827 1748 949 1748 c
644 1748 l
639.58173 1748 636 1744.4183 636 1740 c
636 1211 l
636 1206.5817 639.58173 1203 644 1203 c
h
644 1203 m
S
284 1526 m
605 1526 l
605 1583 l
284 1583 l
h
284 1526 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 281.5 195.5 cm
-79.624001 5.5 m
(:.&\)8"\(.'*6&"&7$#$'$-8)[ 6.992000 5.856000 8.704000 9.376000 7.472000 9.504000 9.344000 6.336000 5.776000 4.240000 8.960000 8.704000 9.504000 8.704000 9.504000 4.512000 4.688000 4.512000 5.776000 4.512000 8.800000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -163 1750 cm
284 1473.5 m
605 1473.5 l
605 1526 l
284 1526 l
h
284 1473.5 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 281.5 250.25 cm
-86.311996 5.5 m
(1-'2\(.3$\);*6&"&7$#$'$-8)[ 10.928000 8.800000 5.776000 11.312000 9.344000 6.176000 8.192000 4.512000 9.376000 8.320000 4.240000 8.960000 8.704000 9.504000 8.704000 9.504000 4.512000 4.688000 4.512000 5.776000 4.512000 8.800000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -163 1750 cm
284 1635 m
605 1635 l
605 1692 l
284 1692 l
h
284 1635 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 281.5 86.5 cm
-68.751999 5.5 m
(4-5$%-*6&"&7$#$'$-8)[ 10.304000 8.640000 7.872000 4.512000 7.488000 8.800000 4.240000 8.960000 8.704000 9.504000 8.704000 9.504000 4.512000 4.688000 4.512000 5.776000 4.512000 8.800000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -163 1750 cm
445 1583 m
605 1583 l
605 1635 l
445 1635 l
h
445 1583 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 362 141 cm
-30.552 -4 m
(<&'-2&,*)[ 10.096000 8.704000 5.616000 8.800000 11.472000 8.544000 7.872000 0.000000 ] xS
-42.824001 15 m
(6&"&7$#$'$-8)[ 8.960000 8.704000 9.504000 8.704000 9.504000 4.512000 4.688000 4.512000 5.776000 4.512000 8.800000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -163 1750 cm
636 1583 m
957 1583 l
957 1692 l
636 1692 l
h
636 1583 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 633.5 112.5 cm
-81.919998 5.5 m
(/-\)8$\);*&\)=*<&'>-.$\);)[ 8.720000 8.800000 9.376000 7.472000 4.512000 9.376000 8.320000 4.240000 8.704000 9.376000 9.568000 4.240000 10.096000 8.704000 5.776000 9.376000 8.800000 6.176000 4.512000 9.376000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -163 1750 cm
636 1474 m
957 1474 l
957 1583 l
636 1583 l
h
636 1474 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 633.5 221.5 cm
-28.08 5.5 m
(?\(0'$\);)[ 9.520000 9.344000 9.312000 5.776000 4.512000 9.376000 0.000000 ] xS
1 0 0 -1 282 526 cm
-42.824001 5.5 m
(6&"&7$#$'$-8)[ 8.960000 8.704000 9.504000 8.704000 9.504000 4.512000 4.688000 4.512000 5.776000 4.512000 8.800000 0.000000 ] xS
1 0 0 -1 633.5 526 cm
-35.335999 5.5 m
(90\)%'$\(\)8)[ 7.856000 9.312000 9.376000 7.648000 5.776000 4.512000 9.344000 9.376000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
