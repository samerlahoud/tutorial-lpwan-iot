%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 853.000000 549.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.6 (Build 16G1314) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 853 549
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 853 549
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: FiraSans-Regular
%!FontType1-1.0: FiraSans-Regular 1.0000.4.1060
14 dict begin/FontName /FiraSans-Regular def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /A put
dup 34 /p put
dup 35 /l put
dup 36 /i put
dup 37 /c put
dup 38 /a put
dup 39 /t put
dup 40 /o put
dup 41 /n put
dup 42 /space put
dup 43 /L put
dup 44 /y put
dup 45 /e put
dup 46 /r put
dup 47 /S put
dup 48 /u put
dup 49 /N put
dup 50 /w put
dup 51 /k put
dup 52 /D put
dup 53 /v put
dup 54 /C put
dup 55 /b put
dup 56 /s put
dup 57 /F put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -748 1 index div -353 2 index div 1360 3 index div 1104 5 -1 roll div]cvx def
/sfnts [<







0405170C4B04143775031C4479031549182209352C032C80930101131A011D2107040A0D0601020403050A0202110B0212240C010E020108310C0408382F0606560340389B3509190804112507020805142C05040F3A0C0711010A290C06251C2705201A0A184C2E117A091862110C1E050C131536335217030112130301171D141C200E050513040E0C063503324BAC35244F0C020708060802061F07080509073332195440042C02434C2C02020E1526140C0E1309014D023A6520190D05111C21463F0603140117421E3458380A02815B0F16030533030A030611150D1A03044F30181F01082E0D1B010419230F0105231B03072F141C2D0606012713020F020906270B0D0A06040E020C11132416123528181E030F07062B0118010E0724030D06080B04260811021A280202090E010A0F0329030512040C0402042F110403100302203E2E3E2D1E0F0E242F11090C0203131A0C0D13151D140925070C06122205073B3504030310220703060F0C0D0213252D30112C070A1606041D26173729061C020709150A0B160812290D34073C333C08403D023A0824420D0C04131107395E25085A03051545281C1604081713030E190110010E061A331204182F120C1603160F08070202040C1F1503051305262F34020A2810040C1804030F0A0F3611030C1D14171A0201130A01192410051003263114031C3106011D040D24030110030A08050E121D2703040E1711020402070A122F23232D3720061E0C0715063C03153E6F0D090C01031A0F101D1303142411070A08060C060A1611091D36013505241A1B0B0402151A1617081B16030D051722081D151601131004080F343F1403570401071A0721150C0E0C1A19041504044F16040311040108022204010B161004010604310302070501036D130C0403070C02190A060E0502022F051112011403D1160408070D0418041704062F030E070602040425021504050E150A07130402031A0C021304010304032117050204260000000001000000041B227895487A5F0F3CF5000303E800000000D214507600000000D2163302FD14FE9F055004500000000700020000000000000001000003A7FEF7000005B4FD14FB58055000010000000000000000000000000000001D029A007B01090000023D0006023000370284006401EB006401F2006402AB0064022100190220002D0252005F01DE003902260039011A004C011A005F0200005F0125005A024A005F024800390252005F0182005F01D30019016900090246005A01EC000A02CD001401EC000A0000FF6104D2002A000000520052008200C8010001260142017001C60222029202D6031E032A03400368039403DE0418047804C8051C0556059805B805E40612064408E700010000001D01C50013005E000700020024003400770000009A0B97
00040001004BB800C85258B101018E59B001B9080008006370B1000642B664503C2A0005002AB1000642400C5708430831072305170405082AB1000642400C61064D063A052A031D0205082AB1000B42BE160011000C8009000600000500092AB1001042BE00400040004000400040000500092AB1030044B12401885158B0408858B1036444B12601885158BA08800001044088635458B103004459595959400C59084508330725051904050C2AB801FF85B0048DB1020044B1056444000000
00>] def
/CharStrings 29 dict dup begin
/.notdef 0 def
/space 1 def
/A 2 def
/C 3 def
/D 4 def
/F 5 def
/L 6 def
/N 7 def
/S 8 def
/a 9 def
/b 10 def
/c 11 def
/e 12 def
/i 13 def
/dotlessi 14 def
/k 15 def
/l 16 def
/n 17 def
/o 18 def
/p 19 def
/r 20 def
/s 21 def
/t 22 def
/u 23 def
/v 24 def
/w 25 def
/y 26 def
/uni0307 27 def
/uniE003 28 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-748 -353 1360 1104}def
/UniqueID 4346234 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C55AC8266BDD340E521355EEF85826934CAE169B3813170EF211585A84BA2E1018753AC3D46AF5B7E6972E6CE9D784AF774D03E666C4D6E151C49B4681AA1928D810D912B01331A14D9D2378EB85DDF7134BDC053104FF791442F9940D76A7519C0CB01B65A0B8E55F92D5E9035861817FC4462B7808D0A5DC5F975CFB5F7E051950C9CC4F8BBD223230B1121670A6C9F598F7E00EC07A106008B395B71E95EC585E084BD4276F8D7CD0D42817F61B7DE8F60D51CD45E649F413361FA47799A2356FA1865739C23E19F50F5016DF27E60B291AB85A3AEB0E50859275DF90EF0AF3AF23DA08FAFBBF8A76142F1521AB33556160838BE57AAE421F0E38ED01D5963344456ECD293BA001C86C9193F33B07D76EA7917BD7405F9B7B034DD1FE06687B41954A47968C0D17B2DE63A6370F9C8592911465618DE0F0A170E96FEDCF7F9D8CEEDBD1B218AF319A0EE49F5A771ACB9E6246A6D519F6B4DB0F86BBE92140C1F42D20A9DEDE26EA839FCD275F5EA8FF2724A2FAAAAEE6D90E700BC147EF121FE6CE6A6A8F6DE83FD2B851BD9621AF9A3E55E28EF7100D35DC4247794A57E6E485478E99A96BAD76E2FBC847F3804852EB27C83F21C8322D398DA3BF6CB13FEFEECB03ED196DB11A2836B96CA77CFE44ACA43434DE59B5054A56678F1C5A1EC53930A7CFA545B8BCDA3F21415C3D97E0FF2139FC8E5D0C1E2216B283C7417631924C5C2B56A7582733742290F98BDCEAC8940E3A3742931FC6D4FD2EBBFDA0D7FEDB997E376D610B14CE364344EABABDA18232C3916F4025FD0A1CEFDA93EF8B727BB4

88EC2A37F375D17535E6B17F4C335429666B1520241E485ADD3CD244437C2F39A11AB105BCE797CB3CB6B12B802BDCBD582AF39EE9AC83DB349D214BF74CBE7E2E63AFD8E8920F40AC972865CF7F32DCC72E2EA06495475FC423420FE1375D1B6FBAEBA54DC16657BBF657D8693C9F2F5D2142CD8F577DB7128EAB24D61FF0A230380DD924C8911A5AB92D63AE5412C65685881F62A679ABC6FF1B3B9CF56EA879628434B2CEF5D39C5052EE743F30F9DEB87271D16A057AF9B0ED1A8B5C3017AF07270573C3C7495DF545BCBE443FE36BFF757D2655ED4BB52A89DDB87B59A64E11CA6BDB717993BD362CA794CA817A34D446F5FDE7EA1538EB980EB58C24AAF507F8603A177B424A90284B7C6578DFE00F0CD85A87707373488D6776830D3FB0F6F00A6E78BF19907F23CEC64670FCBF1B5299396603C4AACE8D7069E756E702E6B50ABA797FB8778555888A8BD445BFB06241BB642DBCEA5B74EB3AAF27937177E6965F038A90636D39CD185C961AED88D63EC946BFC3F9156AF049DFDBE2EBF06C05D459734C2B84FF41C56271C6438FB20C07133AD42C3948ABB616C297C857C6B9A450B648371612E8646520918A09B76DE8728A97A7C7744A4ED68C7BE7BBDD800B4DBCA16F7DB722E65713A881033E761C3E8A54ADBACBC2A5B1BE16C8CC6F053661DDDF2A15CC5546AA8CC3E7A33D417D1E4B763980B6F96C3B0D959BBACB2C0BCDA3ABFCFCA590BE02EE84BAE23D4016630163A2FA429397C1ECC8AC5747837E635982B68F51010968F67FA1ABB8F672F448EC7417B5F79333E769E56BCA6511ECF46B84DB227910B561A573FC73D3D83F7F56844B2FC53F44A486302E22A3BA4C09D5FC8712248624C68CE6CB63F103AD66A80D0572E73057DA0E8688FF76F27260DF6388804748D9B373D4116DB9C235D33D8B614DD4BD92B0C1B556C714CFA5689A7404E195A5916866DE72FB147B82D4317C3CFF30BF9419E4061E53CB1B612AAE7BE145DFE610ECE552555E29BBD27609DD2F2859D4ED37D808CF49ABA12BCA6C47634F7A636AE716955D1E22CF1146937129C4E14A6948029F0341C44E192C89867D985BE8F04B72B881AAA3A9B16E2DA0C6642A4DE551295F3171CAD94D30C5C1ADC9CB882EFA30462229D58CAE3D7717393DC2CAC422553729326239C51C337041EAC0C1904BE978034D60F3A22D593401FC3D25F702F80587B25DBFC2A7B14C8541CB8DED25A7D9A6521313DD9E758D5158702FA7A9EA6FFE83B09A78C6E09EC99391D921D84514602B4788BEBFEF67BABD47BF6AB8A13EC477CDF86C8F489113FA65EB474C19CBA1BFF56B5E59B3EB518B9645DAE58E6B792C51A4ADE115A0E893BA925A3275CA18ED57C990418A5596E7B3B3D7F3DF34251D910A3132A8128F0C9698AE4EB2DD30246D49BF3196DED835D840CBB046


9AA722ECB70EBCC72EE8AA3ACCBE45801783107DE859B39D0E67F3EC01D6168B44E09ECB4D9CCC35DF275D00D4B60B69ECD9335B88B0AF1EFAE5ACBD1E1D1318035A7A7B2E048E10D3BE2AC83EC0329961898E61A84F62FA8A21717912758E87F6C201B401C7DE91EE44F034C2546AC2F7A23BB9E4391898F312D8566651CD44A281E1EBB00B119A2A1B8E3C5E5269C6C65F9CF05BFFC7D0FA51D62FFABED9A6CF36058D581CE1D81CEC3E330DB0554733A0D3691C96D51136CD32B4F83A4600A308E1EBE8971D00F4ED0A21DB8DF410B5D3D60B23B572425B6EDB97FD881F512051B632D8CD97EA9C2ECF1992D381E8673ED6F673ED2E0614309A6F3445C65E799DCE52FC7750F863AF93D5ECABAA4BBE0BA92DC64564A8BCA2E6D69147903EF70A4CA678E902261034505E4CE99BA83B56985B08ACEBDE7EAF6F2F0F62F497DB9B72FD1813ACD2044FC083D24D76EA7A7128032FFD50D689BC6FDE4A7F14DD321F2EF203E3F77260EA0F82FDEFEE34AB671A6DB747AB835F8B73A3CAE17CB49CB75573C60177199C1A526B9C1E439B3689AF5EB873AD3041C45BDEA59FB9510F23D33137F22223A5771AAA3234790ABE637624EA3902A40ABA84225406155235ED65DF7AA552F5F482997BF52FC3362A86E062382F6B738DBB7DDB1857787023E538BDDC043A39CA113CCD20CAE2900440F69D3F81883775CD9BEE
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/FiraSans-Regular cguidfix
/F1.1/FiraSans-Regular renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ { 1.8008  exp } bind { 1.8008  exp } bind { 1.8008  exp } bind ] def 
/MatrixABC [ 0.4295 0.2318 0.0204 0.3278 0.6722 0.1111 0.1933 0.0960 0.9578 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 1 1 sc
q
0 0 853 549 rc
-163 558 m
1030 558 l
1030 -2375 l
-163 -2375 l
h
-163 558 m
f
10 167.5 m
843 167.5 l
847.41827 167.5 851 163.91827 851 159.5 c
851 67 l
851 62.581722 847.41827 59 843 59 c
10 59 l
5.5817218 59 2 62.581722 2 67 c
2 159.5 l
2 163.91827 5.5817218 167.5 10 167.5 c
h
10 167.5 m
f
1 J
1 j
0.60000002 i
0 0 0 sc
1 0 0 -1 -163 558 cm
173 390.5 m
1006 390.5 l
1010.4183 390.5 1014 394.08173 1014 398.5 c
1014 491 l
1014 495.41827 1010.4183 499 1006 499 c
173 499 l
168.58173 499 165 495.41827 165 491 c
165 398.5 l
165 394.08173 168.58173 390.5 173 390.5 c
h
173 390.5 m
S
0 i
1 1 1 sc
CM
10 276 m
843 276 l
847.41827 276 851 272.41827 851 268 c
851 175.5 l
851 171.08173 847.41827 167.5 843 167.5 c
10 167.5 l
5.5817218 167.5 2 171.08173 2 175.5 c
2 268 l
2 272.41827 5.5817218 276 10 276 c
h
10 276 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -163 558 cm
173 282 m
1006 282 l
1010.4183 282 1014 285.58173 1014 290 c
1014 382.5 l
1014 386.91827 1010.4183 390.5 1006 390.5 c
173 390.5 l
168.58173 390.5 165 386.91827 165 382.5 c
165 290 l
165 285.58173 168.58173 282 173 282 c
h
173 282 m
S
0 i
1 1 1 sc
CM
10 384.5 m
843 384.5 l
847.41827 384.5 851 380.91827 851 376.5 c
851 284 l
851 279.58173 847.41827 276 843 276 c
10 276 l
5.5817218 276 2 279.58173 2 284 c
2 376.5 l
2 380.91827 5.5817218 384.5 10 384.5 c
h
10 384.5 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -163 558 cm
173 173.5 m
1006 173.5 l
1010.4183 173.5 1014 177.08173 1014 181.5 c
1014 274 l
1014 278.41827 1010.4183 282 1006 282 c
173 282 l
168.58173 282 165 278.41827 165 274 c
165 181.5 l
165 177.08173 168.58173 173.5 173 173.5 c
h
173 173.5 m
S
0 i
1 1 1 sc
CM
10 493 m
843 493 l
847.41827 493 851 489.41827 851 485 c
851 392.5 l
851 388.08173 847.41827 384.5 843 384.5 c
10 384.5 l
5.5817218 384.5 2 388.08173 2 392.5 c
2 485 l
2 489.41827 5.5817218 493 10 493 c
h
10 493 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -163 558 cm
173 65 m
1006 65 l
1010.4183 65 1014 68.581718 1014 73 c
1014 165.5 l
1014 169.91827 1010.4183 173.5 1006 173.5 c
173 173.5 l
168.58173 173.5 165 169.91827 165 165.5 c
165 73 l
165 68.581718 168.58173 65 173 65 c
h
173 65 m
S
0 i
1 0 0 -1 58.5 439 cm
/F1.1[ 16 0 0 -16 0 0]sf
-41.368 -4 m
(!""#$%&'$\(\)*)[ 9.168000 9.504000 9.504000 4.688000 4.512000 7.648000 8.704000 5.776000 4.512000 9.344000 9.376000 0.000000 ] xS
-19.559999 15 m
(+&,-.)[ 7.968000 8.544000 7.632000 8.800000 0.000000 ] xS
/Cs2 SC
0 sc
1 0 0 -1 58.5 330 cm
-29.247999 -4 m
(/0""\(.'*)[ 8.720000 9.312000 9.504000 9.504000 9.344000 6.336000 5.776000 0.000000 ] xS
-19.559999 15 m
(+&,-.)[ 7.968000 8.544000 7.632000 8.800000 0.000000 ] xS
1 0 0 -1 58.5 221.5 cm
-30.264 -4 m
(1-'2\(.3*)[ 10.928000 8.800000 5.776000 11.312000 9.344000 6.176000 8.192000 0.000000 ] xS
-19.559999 15 m
(+&,-.)[ 7.968000 8.544000 7.632000 8.800000 0.000000 ] xS
1 0 0 -1 58.5 114.5 cm
-23.808001 -4 m
(4-5$%-*)[ 10.304000 8.640000 7.872000 4.512000 7.488000 8.800000 0.000000 ] xS
-19.559999 15 m
(+&,-.)[ 7.968000 8.544000 7.632000 8.800000 0.000000 ] xS
/Cs1 SC
0 0 0 sc
1 0 0 -1 282 531 cm
-42.824001 5.5 m
(6&"&7$#$'$-8)[ 8.960000 8.704000 9.504000 8.704000 9.504000 4.512000 4.688000 4.512000 5.776000 4.512000 8.800000 0.000000 ] xS
/Cs2 SC
0 sc
1 0 0 -1 639 531 cm
-35.335999 5.5 m
(90\)%'$\(\)8)[ 7.856000 9.312000 9.376000 7.648000 5.776000 4.512000 9.344000 9.376000 0.000000 ] xS
/Cs1 SC
1 1 1 sc
CM
129 547 m
434 547 l
438.41827 547 442 543.41827 442 539 c
442 10 l
442 5.5817218 438.41827 2 434 2 c
129 2 l
124.58172 2 121 5.5817218 121 10 c
121 539 l
121 543.41827 124.58172 547 129 547 c
h
129 547 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -163 558 cm
292 11 m
597 11 l
601.41827 11 605 14.581722 605 19 c
605 548 l
605 552.41827 601.41827 556 597 556 c
292 556 l
287.58173 556 284 552.41827 284 548 c
284 19 l
284 14.581722 287.58173 11 292 11 c
h
292 11 m
S
0 i
1 1 1 sc
CM
481 547 m
786 547 l
790.41827 547 794 543.41827 794 539 c
794 10 l
794 5.5817218 790.41827 2 786 2 c
481 2 l
476.58173 2 473 5.5817218 473 10 c
473 539 l
473 543.41827 476.58173 547 481 547 c
h
481 547 m
f
0.60000002 i
0 0 0 sc
1 0 0 -1 -163 558 cm
644 11 m
949 11 l
953.41827 11 957 14.581722 957 19 c
957 548 l
957 552.41827 953.41827 556 949 556 c
644 556 l
639.58173 556 636 552.41827 636 548 c
636 19 l
636 14.581722 639.58173 11 644 11 c
h
644 11 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 282 526 cm
-42.824001 5.5 m
(6&"&7$#$'$-8)[ 8.960000 8.704000 9.504000 8.704000 9.504000 4.512000 4.688000 4.512000 5.776000 4.512000 8.800000 0.000000 ] xS
1 0 0 -1 633.5 526 cm
-35.335999 5.5 m
(90\)%'$\(\)8)[ 7.856000 9.312000 9.376000 7.648000 5.776000 4.512000 9.344000 9.376000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
